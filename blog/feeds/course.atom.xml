<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2017Fall CADP&amp;CP (虎尾科大MDE) - Course</title><link href="https://40423224.github.io/40423224_cadp_final/blog/" rel="alternate"></link><link href="https://40423224.github.io/40423224_cadp_final/blog/feeds/course.atom.xml" rel="self"></link><id>https://40423224.github.io/40423224_cadp_final/blog/</id><updated>2018-01-05T13:30:00+08:00</updated><entry><title>2017 Fall CADP 第十七週</title><link href="https://40423224.github.io/40423224_cadp_final/blog/2017-fall-cadp-w17.html" rel="alternate"></link><published>2018-01-05T13:30:00+08:00</published><updated>2018-01-05T13:30:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2018-01-05:/40423224_cadp_final/blog/2017-fall-cadp-w17.html</id><summary type="html">&lt;p&gt;第十七周心得&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第十七周心得&lt;/p&gt;


&lt;p&gt;期末報告影片：&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/V8JYJkvMiv8" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CADP 第十六週</title><link href="https://40423224.github.io/40423224_cadp_final/blog/2017-fall-cadp-w16.html" rel="alternate"></link><published>2017-12-28T13:30:00+08:00</published><updated>2017-12-28T13:30:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2017-12-28:/40423224_cadp_final/blog/2017-fall-cadp-w16.html</id><summary type="html">&lt;p&gt;第十六周心得&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第十六周心得&lt;/p&gt;


&lt;p&gt;鋼球運動系統模擬&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/-W05YqvXQBI" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CADP 第十五週</title><link href="https://40423224.github.io/40423224_cadp_final/blog/2017-fall-cadp-w15.html" rel="alternate"></link><published>2017-12-24T13:30:00+08:00</published><updated>2017-12-24T13:30:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2017-12-24:/40423224_cadp_final/blog/2017-fall-cadp-w15.html</id><summary type="html">&lt;p&gt;第十五周心得&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第十五周心得&lt;/p&gt;


&lt;p&gt;Onshape影片說明及心得：&lt;/p&gt;
&lt;p&gt;影片一：
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/isNj3OmPJdw" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;影片二：
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/bzSpXPSgcUg" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CADP 第十四週</title><link href="https://40423224.github.io/40423224_cadp_final/blog/2017-fall-cadp-w14.html" rel="alternate"></link><published>2017-12-15T13:30:00+08:00</published><updated>2017-12-15T13:30:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2017-12-15:/40423224_cadp_final/blog/2017-fall-cadp-w14.html</id><summary type="html">&lt;p&gt;第十四周心得&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第十四周心得&lt;/p&gt;


&lt;p&gt;製作軌道&lt;/p&gt;
&lt;p&gt;onshape的軌道繪製:&lt;/p&gt;
&lt;iframe src="./../data/stlviewer/viewstl.html?src=./../STL/guidao.stl" width="800" height="600"&gt;&lt;/iframe&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CADP 第十三週</title><link href="https://40423224.github.io/40423224_cadp_final/blog/2017-fall-cadp-w13.html" rel="alternate"></link><published>2017-12-08T13:30:00+08:00</published><updated>2017-12-08T13:30:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2017-12-08:/40423224_cadp_final/blog/2017-fall-cadp-w13.html</id><summary type="html">&lt;p&gt;第十三周心得&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第十三周心得&lt;/p&gt;


&lt;p&gt;討論并完成鋼球運動機構的循環機構&lt;/p&gt;
&lt;p&gt;&lt;img src="./../data/image/001.png"width="500" height="290"&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;運用此機構將鋼球從高到低循環&lt;/p&gt;
&lt;p&gt;下面是onshape的绘制:&lt;/p&gt;
&lt;iframe src="./../data/stlviewer/viewstl.html?src=./../finalexam/001.stl" width="800" height="600"&gt;&lt;/iframe&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CADP 第十二週</title><link href="https://40423224.github.io/40423224_cadp_final/blog/2017-fall-cadp-w12.html" rel="alternate"></link><published>2017-12-01T13:30:00+08:00</published><updated>2017-12-01T13:30:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2017-12-01:/40423224_cadp_final/blog/2017-fall-cadp-w12.html</id><summary type="html">&lt;p&gt;第十二周心得&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第十二周心得&lt;/p&gt;


&lt;p&gt;建立自己的Github倉儲&lt;/p&gt;
&lt;p&gt;討論鋼球運動系統的詳細細節,并開始繪製個人軌道.&lt;/p&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CADP 第十週</title><link href="https://40423224.github.io/40423224_cadp_final/blog/2017-fall-cadp-w10.html" rel="alternate"></link><published>2017-11-17T13:30:00+08:00</published><updated>2017-11-17T13:30:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2017-11-17:/40423224_cadp_final/blog/2017-fall-cadp-w10.html</id><summary type="html">&lt;p&gt;第十周心得&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第十周心得&lt;/p&gt;


&lt;p&gt;小組討論鋼球運動系統的設計,以及Arduino伺服馬達控制模擬。&lt;/p&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CADP 第八週</title><link href="https://40423224.github.io/40423224_cadp_final/blog/2017-fall-cadp-w8.html" rel="alternate"></link><published>2017-11-03T13:30:00+08:00</published><updated>2017-11-03T13:30:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2017-11-03:/40423224_cadp_final/blog/2017-fall-cadp-w8.html</id><summary type="html">&lt;p&gt;2017 年 Fall 的課程進行到接近一半, 本週整理計算機程式與電腦輔助設計實習的課程相關內容, 說明各種工具的特性與學習重點.&lt;/p&gt;
&lt;p&gt;PS:下周上课前记得完成简报&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2017 年 Fall 的課程進行到接近一半, 本週整理計算機程式與電腦輔助設計實習的課程相關內容, 說明各種工具的特性與學習重點.&lt;/p&gt;
&lt;p&gt;PS:下周上课前记得完成简报&lt;/p&gt;


&lt;h3&gt;機電資整合教育&lt;/h3&gt;
&lt;p&gt;計算機程式與電腦輔助設計實習課程的教學目的, 分別從機械、電子與資訊工程等三個領域的相關技術中, 以電腦及網路應用為主軸, 教導學員&lt;span style="background-color: #ffff00;"&gt;了解初步的 Python3 程式語法, 物件導向與事件導向程式的特性&lt;/span&gt;, 能夠建立簡單的視窗程式, 與電腦輔助設計實習中的簡單機電系統配合, 用來&lt;span style="background-color: #ffff00;"&gt;控制虛擬或實際的機構、馬達與感測器所組合而成的裝置&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;其中, 為了推廣學員互相學習, 特別導入軟體組態管理系統, 初期以 Fossil SCM 為主, 最後將與 Github 及 Bitbucket 倉儲進行同步整合.&lt;/p&gt;
&lt;p&gt;各班所使用的 Fossil SCM 主機分別為:&lt;/p&gt;
&lt;p&gt;計算機程式: &lt;a href="https://cpa.kmol.info"&gt;https://cpa.kmol.info&lt;/a&gt; 與 &lt;a href="https://cpb.kmol.info"&gt;https://cpb.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;電腦輔助設計實習: &lt;a href="https://cadpa.kmol.info"&gt;https://cpa.kmol.info&lt;/a&gt; 與 &lt;a href="https://cadpb.kmol.info"&gt;https://cadpb.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2017 Fall 的計算機程式希望各學員都能自行利用 Eric6 IDE, 建立簡單的 PyQt5 Calculator 視窗程式, 並朝利用程式控制 V-rep 中的機電模擬系統的方向學習.&lt;/p&gt;
&lt;p&gt;2017 Fall 的電腦輔助設計實習則利用可攜簡單的 Solvespace, 進行系統機構的原型概念設計後, 再利用 Onshape 進行各組的協同細部設計, 最後則每班預計利用 Arduino 控制卡與伺服馬達及傳動機構, 完成四組鋼球循環運動系統實作, 並且嘗試採用計算機程式課程所完成的 PyQt5 視窗程式, 擷取鋼球通過軌道紅外線偵測點的資訊.&lt;/p&gt;
&lt;h3&gt;課程工具介紹&lt;/h3&gt;
&lt;p&gt;本課程在 Windows 10 操作系統中建立可攜的 Python3 程式環境, 各學員可以自行從 &lt;a href="http://service.mde.tw/public/python2017fall_36.7z"&gt;http://service.mde.tw/public/python2017fall_36.7z&lt;/a&gt; 下載後解壓縮, 放入 USB 3.0 規格以上的隨身碟, 即可利用 start.bat 啟動, 以 stop.bat 終止相關程式, 可攜系統還包括 SciTE 編輯器, 可以直接以解譯方式執行  Python3 程式, 也可以透過 Tiny C, 以類解譯的方式執行 ANSI C 程式.&lt;/p&gt;
&lt;p&gt;可攜系統中還包括 Leo Editor、Pelican Blog、Reveal.js、Fossil SCM、Git、Solvespace、V-rep、Blender 等系統, 以下分別介紹其基本功能.&lt;/p&gt;
&lt;h3&gt;Leo Editor 大綱管理系統&lt;/h3&gt;
&lt;p&gt;Leo Editor 是一套採用 Python 與 PyQt 編寫的大綱管理系統, 在本課程中主要用來建立 Pelican 靜態網誌, 並提供近端 www 伺服器按鈕, 可以讓使用者在近端模擬區域網路或廣域網路上 https 主機所呈現的網頁內容.&lt;/p&gt;
&lt;p&gt;此外, Leo Editor 中有 @clean 節點指令, 可用來有效管理 html 多層次標註文件, 讓使用者建立 Reveal.js 網際投影片時, 能夠分區編輯所需的內容, 並且重用各投影片中的各種專用格式架構.&lt;/p&gt;
&lt;p&gt;但是 Leo Editor 的存檔格式採用 XML, 各學員在組態管理系統資料改版推送的過程, 必須設法&lt;span style="background-color: #ffff00;"&gt;避免不同版次間的 .leo 檔案產生衝突&lt;/span&gt;, 因為利用視窗套件用來處理 .leo 檔案衝突的程式套件尚未建立, 因此各組學員目前必須採各人一個 .leo 檔案的方式進行協同, 也要避免讓個人的 .leo 在版次提交推送過程產生衝突.&lt;/p&gt;
&lt;h3&gt;Pelican 靜態網誌&lt;/h3&gt;
&lt;p&gt;網誌是工作歷程的紀錄, 本系列課程特別強調各學員在學習機械設計相關課程的階段, 必須&lt;span style="background-color: #ffff00;"&gt;利用編寫網誌的機會, 訓練自己口語、文字、2D 、3D 與數學表達的能力&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;使用者建立 Pelican 靜態網誌的流程, 採用 Leo Editor 中所建立的套稿, 編寫 Markdown 格式文章, 透過 Leo Editor 中的近端轉檔與遠端轉檔按鈕, 執行 Pelican 指令, 將 Markdown 格式檔案, 依照使用者的設定, 轉換成 html 文件, 使用者可以進一步利用 Leo Editor ˋ中的 IPv4 或 IPV6 WWW 伺服器按鈕, 在近端檢查所完成的 Pelican 靜態網頁, 確定無誤後, 再納入 Disqus 的遠端留言設定, 轉換成準備提交推送到遠端 Fossil SCM 、Github、或 Bitbucket 對應倉儲.&lt;/p&gt;
&lt;h3&gt;Reveal.js 網際簡報&lt;/h3&gt;
&lt;p&gt;&lt;span style="background-color: #ffff00;"&gt;各學員在期中考與期末考週, 必須先行利用 ShareX 拍攝個人簡報內容後, 將影片上傳至 Vimeo 與 Youtube, 在考試時段利用 Reveal.js 簡報個人專題報告內容並自評期中與期末成績.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Fossil SCM 組態管理系統&lt;/h3&gt;
&lt;p&gt;學習 Fossil 最佳的方式就是親自操作使用, fossil.exe 2.3 版檔案大小只有約 6MB, 但是卻提供網際伺服 Html 與 Javascript 檔案與 Wiki 的功能, 也能透過瀏覽器在 Wiki 文章中附加檔案, 各學員必須從個人倉儲熟悉組態管理系統的各項功能後, 在專題製作過程利用 Fossil SCM 進行協同設計.&lt;/p&gt;
&lt;h3&gt;Solvespace、Onshape 與 V-rep&lt;/h3&gt;
&lt;p&gt;學習這三套系統的最佳途徑 , 就是從各&lt;span style="background-color: #ffff00;"&gt;官方網頁中的 Tutorial 與說明文件中逐步熟習各套件的特性與使用方法&lt;/span&gt;, 並且透過專題製作, 實際應用其功能 , &lt;span style="background-color: #ffff00;"&gt;解決&lt;/span&gt;過程中所面臨的各種&lt;span style="background-color: #ffff00;"&gt;問題&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;CP Qt Designer 教學影片&lt;/h3&gt;
&lt;p&gt;Qt Designer Manual: &lt;a href="http://doc.qt.io/qt-5/qtdesigner-manual.html"&gt;http://doc.qt.io/qt-5/qtdesigner-manual.html&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Dmo8eZG5I2w" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Layout&lt;/p&gt;
&lt;p&gt;MainWindow&lt;/p&gt;
&lt;p&gt;Widget&lt;/p&gt;
&lt;p&gt;Form&lt;/p&gt;
&lt;p&gt;Preview&lt;/p&gt;
&lt;p&gt;一乙第八週上課教學影片:&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/240438422" width="640" height="491" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/240438422"&gt;國立虎尾科技大學機械設計工程系計算機程式 - 一乙第八週第一部分, 說明 Python 物件導向的術語及基本用法&lt;/a&gt; from &lt;a href="https://vimeo.com/user24079973"&gt;國立虎尾科技大學機械設計工程系&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/240439864" width="640" height="491" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/240439864"&gt;國立虎尾科技大學機械設計工程系計算機程式 - 一乙第八週第二部分, 利用瀏覽器中的 Brython 程式環境, 練習如何使用 for 迴圈、函式與類別定義.&lt;/a&gt; from &lt;a href="https://vimeo.com/user24079973"&gt;國立虎尾科技大學機械設計工程系&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/240443030" width="640" height="491" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/240443030"&gt;國立虎尾科技大學機械設計工程系計算機程式 - 一乙第八週第三部分, 說明如何利用 Eric6 IDE 建立所需的 calculator 計算機程式對話表單.&lt;/a&gt; from &lt;a href="https://vimeo.com/user24079973"&gt;國立虎尾科技大學機械設計工程系&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;CADP Onshape 教學影片&lt;/h3&gt;
&lt;p&gt;基本草圖繪製&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/pMWnsHpDlQE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件組立&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/KmTHj5uQrjc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;參數設計&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/zE4w59DNZHs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Sweep Tutorial&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/moNkVCULGMk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;CADP V-rep 教學影片&lt;/h3&gt;
&lt;p&gt;利用 Python 程式控制 V-rep 動態模型&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/SQont-mTnfM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CP 第七週-電腦輔助設計實習第七週學習心得</title><link href="https://40423224.github.io/40423224_cadp_final/blog/40423224-w7-exam.html" rel="alternate"></link><published>2017-10-27T11:00:00+08:00</published><updated>2017-10-27T11:00:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2017-10-27:/40423224_cadp_final/blog/40423224-w7-exam.html</id><summary type="html">&lt;p&gt;各階段摘要說明：
第二週：建立fossil倉儲
第三週：改善倉儲環境并及時協同
第四週：利用 Python3 與 PyQt5 建立一個簡單的計算器
第五週：利用Solvesapce 建立Nutcracker系統的零組件, 並且將所完成的零組件顯示在網誌中, 並提供 .slvs 檔案下載.
第六週：使用 Eric6 IDE 建立 PyQt5 視窗程式
第七週：線上考試與心得&lt;/p&gt;
</summary><content type="html">&lt;p&gt;各階段摘要說明：
第二週：建立fossil倉儲
第三週：改善倉儲環境并及時協同
第四週：利用 Python3 與 PyQt5 建立一個簡單的計算器
第五週：利用Solvesapce 建立Nutcracker系統的零組件, 並且將所完成的零組件顯示在網誌中, 並提供 .slvs 檔案下載.
第六週：使用 Eric6 IDE 建立 PyQt5 視窗程式
第七週：線上考試與心得&lt;/p&gt;


&lt;p&gt;Exam1：&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/xFXDbRZVIrw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Exam2：&lt;/p&gt;
&lt;iframe src="./../data/stlviewer/viewstl.html?src=./../STL/40423224-w7-exam2.stl" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/kPGOGXzwdwg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Exam3：&lt;/p&gt;
&lt;iframe src="./../data/stlviewer/viewstl.html?src=./../STL/40423224-w7-exam3.stl" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5QBYFQWhcdo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CP 第六週 - Python3 程式語法練習</title><link href="https://40423224.github.io/40423224_cadp_final/blog/2017-fall-cadp-w6.html" rel="alternate"></link><published>2017-10-20T11:00:00+08:00</published><updated>2017-10-20T11:00:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2017-10-20:/40423224_cadp_final/blog/2017-fall-cadp-w6.html</id><summary type="html">&lt;p&gt;本週起開始使用 Eric6 IDE 建立 PyQt5 視窗程式, 計算器程式的圖形介面將從 Qt Designer 中, 以滑鼠及視覺化模式建立, 之後再轉為 .py 程式後, 與隨後的程式邏輯進行互動. 請使用者自行下載 &lt;a href="https://link.springer.com/book/10.1007/978-1-4842-2385-7"&gt;Lean Python&lt;/a&gt; 電子書與&lt;a href="https://github.com/Apress/lean-python"&gt;範例程式&lt;/a&gt;配合學習.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;本週起開始使用 Eric6 IDE 建立 PyQt5 視窗程式, 計算器程式的圖形介面將從 Qt Designer 中, 以滑鼠及視覺化模式建立, 之後再轉為 .py 程式後, 與隨後的程式邏輯進行互動. 請使用者自行下載 &lt;a href="https://link.springer.com/book/10.1007/978-1-4842-2385-7"&gt;Lean Python&lt;/a&gt; 電子書與&lt;a href="https://github.com/Apress/lean-python"&gt;範例程式&lt;/a&gt;配合學習.&lt;/p&gt;


&lt;!-- 導入 FileSaver 與 filereader --&gt;

&lt;script type="text/javascript" src="./../ace/FileSaver.min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../ace/filereader.js"&gt;&lt;/script&gt;

&lt;!-- 導入最新版的 Brython 標準程式庫 3.3.4 --&gt;

&lt;script type="text/javascript" src="./../data/Brython-3.3.4/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 導入平面機構模擬所需程式庫 --&gt;

&lt;!-- sylvester.js 為向量、矩陣與幾何程式庫 http://sylvester.jcoglan.com/ --&gt;

&lt;script src="./../data/sylvester/sylvester.js"&gt;&lt;/script&gt;

&lt;!-- PrairieDraw.js 為延伸 sylvester.js 的 html5 canvas 繪圖應用程式庫 https://github.com/martin70/PrairieDraw.js --&gt;

&lt;script src="./../data/sylvester/PrairieDraw.js"&gt;&lt;/script&gt;

&lt;style&gt;
canvas {
    border: 1px solid black;
}
&lt;/style&gt;

&lt;!-- 啟動 Brython 時, 設定 pythonpath 為 data/py, 並將 script1.py 放入, 以便取代 3.2.9 之前版本的 script id 導入 --&gt;

&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下執行 Brython 程式 --&gt;

&lt;script src="./../ace/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/ext-language_tools.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/mode-python3.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/snippets/python.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;

&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;

&lt;p&gt;編寫 Python3 程式邏輯之前必須先了解基本的程式語法, 其中包括:&lt;/p&gt;
&lt;h3&gt;Python3 變數命名規則與關鍵字&lt;/h3&gt;
&lt;p&gt;Python 英文變數命名規格&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;變數必須以英文字母大寫或小寫或底線開頭
變數其餘字元可以是英文大小寫字母, 數字或底線
變數區分英文大小寫
變數不限字元長度
不可使用關鍵字當作變數名稱
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用者可以利用以下程式列出所使用 Python 的版次與關鍵字:&lt;/p&gt;
&lt;!-- 印出版次與關鍵字程式 --&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

Ace.editor.setValue('''# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
&lt;/script&gt;

&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;

&lt;div id="kw_editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="kw_filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('kw_py_src', 'kw_filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="kw_run"&gt;Run&lt;/button&gt;
&lt;button id="kw_show_console"&gt;Output&lt;/button&gt;
&lt;button id="kw_clear_console"&gt;清除&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="kw_console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Python3 的程式關鍵字, 使用者命名變數時, 必須避開下列保留字.&lt;/p&gt;
&lt;p&gt;Python keywords:  ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']&lt;/p&gt;
&lt;p&gt;選擇好的變數名稱:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;使用有意義且適當長度的變數名稱， 例如: 使用 length 代表長度, 不要單獨使用 l 或 L, 也不要使用 this_is_the_length
程式前後變數命名方式盡量一致, 例如: 使用 rect_length 或 RectLength
用底線開頭的變數通常具有特殊意義
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;print() 函式用法&lt;/h3&gt;
&lt;p&gt;print() 為 Python 程式語言中用來列印數值或字串的函式, 其中有 sep 變數定義分隔符號, ｓep 內定為 ",", end 變數則用來定義列印結尾的符號, end 內定為跳行符號.&lt;/p&gt;
&lt;h3&gt;for 迴圈用法與 Python 的縮排規定&lt;/h3&gt;
&lt;p&gt;重複迴圈用法, 使用者可以透過下列程式編輯區練習 for 迴圈與 print() 函式的用法.&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

Ace = ace.Editor(editor_id="editor", console_id="console", container_id="first_container", storage_id="py_src" )

Ace.editor.setValue('''#ex1 簡單的 for 迴圈範例
for i in range(10):
    print(i)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['run'].bind('click', Ace.run)
doc['show_console'].bind('click', Ace.show_console)
doc['clear_console'].bind('click', Ace.clear_console)
&lt;/script&gt;

&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;

&lt;div id="editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('py_src', 'filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="run"&gt;Run&lt;/button&gt;
&lt;button id="show_console"&gt;Output&lt;/button&gt;
&lt;button id="clear_console"&gt;清除&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;!-- 以下置入 brython turtle 繪圖程式段, 但是各畫布必須使用不同名稱 --&gt;

&lt;p&gt;下列的 Brython turtle 網際繪圖程式僅提供參考, 可以用來練習 Python3 程式語法.&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

Ace = ace.Editor(editor_id="turtle_editor", console_id="turtle_console", container_id="container", storage_id="turtle_py_src" )

Ace.editor.setValue('''import turtle
t=turtle.Turtle()

t.penup()
t.left(45)
t.backward(125)
t.right(45)
t.pendown()

for c in ['red', 'green', 'yellow', 'blue']:
    t.color(c)
    t.forward(75)
    t.left(90)

t1=turtle.Turtle("turtle")
t1.penup()

t1.pendown()
t1.width(3)
for c in ['red', 'blue', 'yellow', 'green', 'purple', 'brown']:
    t1.color(c)
    t1.forward(50)
    t1.left(60)

t1.penup()
t1.left(60)
t1.backward(120)

t1.pendown()
t1.color('red')
t1.write("I love Brython!!")

turtle._Screen().end()
''')

Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

doc['turtle_run'].bind('click', Ace.run)
doc['turtle_show_console'].bind('click', Ace.show_console)
doc['turtle_clear_console'].bind('click', Ace.clear_console)
doc['turtle_clear_container'].bind('click', Ace.clear_container)
&lt;/script&gt;

&lt;div id="turtle_editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="turtle_filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('tutle_py_src', 'turtle_filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="turtle_run"&gt;Run&lt;/button&gt;
&lt;button id="turtle_show_console"&gt;Output&lt;/button&gt;
&lt;button id="turtle_clear_console"&gt;清除&lt;/button&gt;
&lt;button id="turtle_clear_container"&gt;清除畫布&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="turtle_console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;!-- container 主要提供網際繪圖用之畫布 --&gt;

&lt;div id="container"&gt;&lt;/div&gt;

&lt;h3&gt;函式用法與呼叫&lt;/h3&gt;
&lt;p&gt;使用者可以利用下列程式, 練習 def 函式定義與呼叫的用法.&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

Ace = ace.Editor(editor_id="fun_editor", console_id="fun_console", container_id="fun_container", storage_id="fun_py_src" )

Ace.editor.setValue('''# 定義函式
def square_of_x(x):
    return x*x

# 呼叫函式
y = square_of_x(3)
# 列印 y 對應內容
print(y)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['fun_run'].bind('click', Ace.run)
doc['fun_show_console'].bind('click', Ace.show_console)
doc['fun_clear_console'].bind('click', Ace.clear_console)
&lt;/script&gt;

&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;

&lt;div id="fun_editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="fun_filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('fun_py_src', 'fun_filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="fun_run"&gt;Run&lt;/button&gt;
&lt;button id="fun_show_console"&gt;Output&lt;/button&gt;
&lt;button id="fun_clear_console"&gt;清除&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="fun_console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;!-- Brython 的網際繪圖 --&gt;

&lt;p&gt;以下網際繪圖程式, 僅提供參考.&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

Ace = ace.Editor(editor_id="by_editor", console_id="by_console", container_id="by_container", storage_id="by_py_src" )

Ace.editor.setValue('''# First of all, the import of some libraries
from browser import document as doc
from browser import html

# All the elements will be inserted in the div with the "container" id
container = doc['by_container']

# We create a new div element
newdiv = html.DIV(id = "new-div")
# Now we add some style
newdiv.style = {"padding": "5px", 
               "backgroundColor": "#ADD8E6"}

# Now, lets add a table with a column with numbers and a
# column with a word on each cell
text = "Brython is really cool"
textlist = text.split()
table = html.TABLE()
for i, word in enumerate(textlist):
    table &lt;= html.TR(html.TD(i + 1) + 
                     html.TD(word))
# Now we add some style to the table
table.style = {"padding": "5px", 
               "backgroundColor": "#aaaaaa",
               "width": "100%"}
# Now we add the table to the new div previously created
newdiv &lt;= table + html.BR()

# a form? why not?
form = html.FORM()
input1 = html.INPUT(type="text", name="firstname", value="First name")
input2 = html.INPUT(type="text", name="lastname", value="Last name")
input3 = html.BUTTON("Button with no action!")
form &lt;= input1 + html.BR() + input2 + html.BR() + input3

newdiv &lt;= form + html.BR()

# Finally, we will add something more 'HTML5istic', a canvas with
# a color gradient in the newdiv previously created and below the form
canvas = html.CANVAS(width = 300, height = 300)
#canvas.style = {"width": "100%"}
ctx = canvas.getContext('2d')
ctx.rect(0, 0, 300, 300)
grd = ctx.createRadialGradient(150, 150, 10, 150, 150, 150)
grd.addColorStop(0, '#8ED6FF')
grd.addColorStop(1, '#004CB3')
ctx.fillStyle = grd
ctx.fill()

newdiv &lt;= canvas
# And finally we append the newdiv element
# to the parent, in this case the div with the "container" id
container &lt;= newdiv
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['by_run'].bind('click', Ace.run)
doc['by_show_console'].bind('click', Ace.show_console)
doc['by_clear_console'].bind('click', Ace.clear_console)
doc['by_clear_container'].bind('click', Ace.clear_container)
&lt;/script&gt;

&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;

&lt;div id="by_editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="by_filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('by_py_src', 'by_filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="by_run"&gt;Run&lt;/button&gt;
&lt;button id="by_show_console"&gt;Output&lt;/button&gt;
&lt;button id="by_clear_console"&gt;清除&lt;/button&gt;
&lt;button id="by_clear_container"&gt;清除畫布&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="by_console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div id="by_container"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;!-- Brython 動畫 --&gt;

&lt;p&gt;以下網際動態繪圖程式, 僅提供參考.&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

Ace = ace.Editor(editor_id="clock_editor", console_id="clock_console", container_id="clock_container", storage_id="clock_py_src" )

Ace.editor.setValue('''# First of all, the import of some libraries
import time
import math
import datetime
from browser import document as doc
import browser.timer
from browser import html

sin,cos = math.sin,math.cos
width,height = 250,250 # canvas dimensions
ray = 100 # clock ray

# All the elements will be inserted in the div with the "container" id
container = doc['clock_container']

# We create a new div element
newdiv = html.DIV(id = "new-div")
# Now we add some style
newdiv.style = {"padding": "5px", 
               "backgroundColor": "#ADD8E6"}

canvas = html.CANVAS(width = width, height = height)
#canvas.style = {"width": "100%"}
ctx = canvas.getContext('2d')

def needle(angle,r1,r2,color="#000000"):
    # draw a needle at specified angle in specified color
    # r1 and r2 are percentages of clock ray
    x1 = width/2-ray*cos(angle)*r1
    y1 = height/2-ray*sin(angle)*r1
    x2 = width/2+ray*cos(angle)*r2
    y2 = height/2+ray*sin(angle)*r2
    ctx.beginPath()
    ctx.strokeStyle = color
    ctx.moveTo(x1,y1)
    ctx.lineTo(x2,y2)
    ctx.stroke()

def set_clock():
    # erase clock
    ctx.beginPath()
    ctx.fillStyle = "#FFF"
    ctx.arc(width/2,height/2,ray*0.89,0,2*math.pi)
    ctx.fill()

    # redraw hours
    show_hours()

    # print day
    now = datetime.datetime.now()
    day = now.day
    ctx.font = "bold 14px Arial"
    ctx.textAlign = "center"
    ctx.textBaseline = "middle"
    ctx.fillStyle="#FFF"
    ctx.fillText(day,width*0.7,height*0.5)

    # draw needles for hour, minute, seconds    
    ctx.lineWidth = 3
    hour = now.hour%12 + now.minute/60
    angle = hour*2*math.pi/12 - math.pi/2
    needle(angle,0.05,0.5)
    minute = now.minute
    angle = minute*2*math.pi/60 - math.pi/2
    needle(angle,0.05,0.85)
    ctx.lineWidth = 1
    second = now.second+now.microsecond/1000000
    angle = second*2*math.pi/60 - math.pi/2
    needle(angle,0.05,0.85,"#FF0000") # in red

browser.timer.set_interval(set_clock,100)

ctx.beginPath()
ctx.lineWidth = 10
ctx.arc(width/2,height/2,ray,0,2*math.pi)
ctx.stroke()

for i in range(60):
    ctx.lineWidth = 1
    if i%5 == 0:
        ctx.lineWidth = 3
    angle = i*2*math.pi/60 - math.pi/3
    x1 = width/2+ray*cos(angle)
    y1 = height/2+ray*sin(angle)
    x2 = width/2+ray*cos(angle)*0.9
    y2 = height/2+ray*sin(angle)*0.9
    ctx.beginPath()
    ctx.moveTo(x1,y1)
    ctx.lineTo(x2,y2)
    ctx.stroke()

def show_hours():
    ctx.beginPath()
    ctx.arc(width/2,height/2,ray*0.05,0,2*math.pi)
    ctx.fillStyle = "#000"
    ctx.fill()
    for i in range(1,13):
        angle = i*math.pi/6-math.pi/2
        x3 = width/2+ray*cos(angle)*0.75
        y3 = height/2+ray*sin(angle)*0.75
        ctx.font = "20px Arial"
        ctx.textAlign = "center"
        ctx.textBaseline = "middle"
        ctx.fillText(i,x3,y3)
    # cell for day
    ctx.fillStyle = "#000"
    ctx.fillRect(width*0.65,height*0.47,width*0.1,height*0.06)

show_hours()
set_clock()

newdiv &lt;= canvas
# And finally we append the newdiv element
# to the parent, in this case the div with the "container" id
container &lt;= newdiv
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['clock_run'].bind('click', Ace.run)
doc['clock_show_console'].bind('click', Ace.show_console)
doc['clock_clear_console'].bind('click', Ace.clear_console)
doc['clock_clear_container'].bind('click', Ace.clear_container)
&lt;/script&gt;

&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;

&lt;div id="clock_editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="clock_filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('clock_py_src', 'clock_filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="clock_run"&gt;Run&lt;/button&gt;
&lt;button id="clock_show_console"&gt;Output&lt;/button&gt;
&lt;button id="clock_clear_console"&gt;清除&lt;/button&gt;
&lt;button id="clock_clear_container"&gt;清除畫布&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="clock_console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div id="clock_container"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;基本物件導向與案例&lt;/h3&gt;
&lt;p&gt;Python 採用類別 (class) 將案例變數 (instance variables) 與案例方法 (instance methods) 包在一起, 並用來定義一種物件 (object).&lt;/p&gt;
&lt;p&gt;物件導向具有封裝 (encapsulation) , 繼承 (inheritance) 與多形 ( polymorphism) 等三種特性.&lt;/p&gt;
&lt;!-- oop 範例 --&gt;

&lt;p&gt;使用者可以利用下列程式練習 Python3 物件的定義與應用.&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

Ace = ace.Editor(editor_id="oop1_editor", console_id="oop1_console", container_id="oop1_container", storage_id="oop1_py_src" )

Ace.editor.setValue('''# Robot class 定義
class Robot(object):
    def __init__(self, name, by):
        self._name = name
        self._build_year = by

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, newname):
        self._name = name

    @property
    def build_year(self):
        return self._build_year

    @build_year.setter
    def build_year(self, newby):
        self._build_year = newby

x = Robot("bob", 1993)
x.build_year = 1993
print(x.name)
print(x.build_year)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['oop1_run'].bind('click', Ace.run)
doc['oop1_show_console'].bind('click', Ace.show_console)
doc['oop1_clear_console'].bind('click', Ace.clear_console)
&lt;/script&gt;

&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;

&lt;div id="oop1_editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="oop1_filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('oop1_py_src', 'oop1_filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="oop1_run"&gt;Run&lt;/button&gt;
&lt;button id="oop1_show_console"&gt;Output&lt;/button&gt;
&lt;button id="oop1_clear_console"&gt;清除&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="oop1_console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;!-- 必須處理重複執行後機構模擬產生錯誤的問題 --&gt;

&lt;p&gt;以下平面機構動態模擬程式, 僅提供參考.&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

Ace = ace.Editor(editor_id="link_editor", console_id="link_console", container_id="fourbar", storage_id="link_py_src" )

Ace.editor.setValue('''# 導入所需模組
from browser import document as doc
from browser import window
from browser import timer
from browser import html
import math

# 利用 window 擷取 PrairieDraw 程式庫變數物件, 然後以 new 方法轉為 Brython 變數
pdraw = window.PrairieDraw.new
# 利用 window 擷取 PrairieDrawAnim 程式庫變數物件, 然後以 new 方法轉為 Brython 變數
PrairieDrawAnim = window.PrairieDrawAnim.new

# 利用 window 擷取 sylvester 程式庫變數物件 Vector, 並將其 create 方法直接轉為 Brython 變數
# 在 sylvester 中的 $V 簡化變數無法直接在 Brython 程式中引用
vector = window.Vector.create

# 在 "fourbar" 畫布中建立 panim 動態模擬案例
panim = PrairieDrawAnim("fourbar")

# 平面連桿繪圖以 t = 0 起始
t = 0
# 控制轉動方向變數
direction = True

# 繪製不同 t 時間下的平面連桿
def draw():
    global t, direction, fast
    # 設定模擬繪圖範圍
    panim.setUnits(6, 6)
    # 設定箭頭線寬
    panim.setProp("arrowLineWidthPx",2)

    # 起始變數設定
    omega = 1
    length_bar1 = 1
    length_bar2 = 26/18
    length_bar3 = 2
    length_base = 40/18
    time = 0

    # 畫出地面直線
    G = vector([0, -0.5])
    panim.ground(G, vector([0, 1]), 10)

    # 連桿長度與角度計算
    A = t*omega # "theta"
    AD = length_bar1 #length of left bar
    AB = length_base #distance between two stationary pivots
    BC = length_bar3 #length of right bar
    CD = length_bar2 #length of middle bar
    BD = math.sqrt(AD*AD + AB*AB - 2*AD*AB*math.cos(A))
    C = math.acos((BC*BC + CD*CD - BD*BD)/(2*BC*CD))
    ABD = math.asin(CD * math.sin(C) / BD)
    DBC = math.asin(AD * math.sin(A) / BD)
    B = ABD + DBC
    D = math.pi - B - C

    # draw pivot
    pivot_left = vector([AB/-2, 0])
    pivot_right = vector([AB/2, 0])
    panim.pivot(vector([pivot_left.e(1), -0.5]), pivot_left, 0.5)
    panim.pivot(vector([pivot_right.e(1), -0.5]), pivot_right, 0.5)

    # 儲存轉換矩陣
    panim.save()
    #FIRST BAR
    panim.translate(pivot_left)
    panim.rotate(A)
    panim.rod(vector([0,0]), vector([AD,0]), 0.25)
    panim.point(vector([0,0]))

    #SECOND BAR
    panim.translate(vector([AD,0]))
    panim.rotate(A*-1)  #"undo" the original A rotation
    panim.rotate(D)     #rotate by D only
    panim.rod(vector([0,0]), vector([CD,0]), 0.25)
    panim.point(vector([0,0]))

    #THIRD BAR
    panim.translate(vector([CD,0]))
    panim.rotate(math.pi+C)
    panim.rod(vector([0,0]), vector([BC,0]), 0.25)
    panim.point(vector([0,0]))
    # 回復原先的轉換矩陣
    panim.restore()

    panim.point(vector([pivot_right.e(1), 0]))
    # 時間增量
    if direction == True:
        t += 0.08
    else:
        t += -0.08

# 先畫出 t = 0 的連桿機構
draw()

# 將 anim 設為 None
anim = None

def launchAnimation(ev):
    global anim
    # 初始啟動, anim 為 None
    if anim is None:
        # 每 0.08 秒執行一次 draw 函式繪圖
        anim = timer.set_interval(draw, 80)
        # 初始啟動後, 按鈕文字轉為"暫停"
        doc['power'].text = '暫停'
    elif anim == 'hold':
        # 當 anim 為 'hold' 表示曾經暫停後的啟動, 因此持續以 set_interval() 持續旋轉, 且將 power 文字轉為"暫停"
        anim = timer.set_interval(draw, 80)
        doc['power'].text = '暫停'
    else:
        # 初始啟動後, 使用者再按 power, 此時 anim 非 None 也不是 'hold', 因此會執行 clear_interval() 暫停
        # 且將 anim 變數設為 'hold', 且 power 文字轉為"繼續"
        timer.clear_interval(anim)
        anim = 'hold'
        doc['power'].text = '繼續'

def reverse(ev):
    global anim, direction
    # 當 anim 為 hold 時, 按鈕無效
    if anim != "hold":
        if direction == True:
            direction = False
        else:
            direction = True

doc["power"].bind("click", launchAnimation)
doc["reverse"].bind("click", reverse)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['link_run'].bind('click', Ace.run)
doc['link_show_console'].bind('click', Ace.show_console)
doc['link_clear_console'].bind('click', Ace.clear_console)
&lt;/script&gt;

&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;

&lt;div id="link_editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="link_filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave('link_py_src', 'link_filename');"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="link_run"&gt;Run&lt;/button&gt;
&lt;button id="link_show_console"&gt;Output&lt;/button&gt;
&lt;button id="link_clear_console"&gt;清除&lt;/button&gt;
&lt;button id="power"&gt;啟動&lt;/button&gt;
&lt;button id="reverse"&gt;反向&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="link_console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;canvas id="fourbar" width="250" height="250"&gt;&lt;/canvas&gt;&lt;/p&gt;
&lt;p&gt;目前所在頁面, 分別利用 Brython 與 Ace.js 編輯器, 可直接在網誌中執行 Python3 程式, 基本架構為將 Brython 的標準輸出轉到特定 div 標註, 而 Ace.js 編輯器則設為與其內的程式碼相同長度, 但至多只會在頁面中顯示 20 行, 且編輯器內的程式碼使用 12 號字元.&lt;/p&gt;
&lt;p&gt;ace.py 原始碼, 位於 data/py 目錄中, 將原先只能單一呼叫的函式改為物件, 可以在同一頁面中產生案例時, 透過各標註的 id 字串區分各段程式碼, 是本課程 Python3 物件導向程式的實際應用範例, 僅提供參考.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
import sys
import time
import traceback
import javascript

from browser import document as doc, window, alert

if hasattr(window, 'localStorage'):
    from browser.local_storage import storage
else:
    storage = None

class cOutput:

    def __init__(self, target):
        self.target = doc[target]

    def write(self, data):
        self.target.value += str(data)

class Editor():

    def __init__(self, editor_id, console_id, container_id, storage_id):
        self.editor_id = editor_id
        self.console_id = console_id
        self.container_id = container_id
        self.storage_id = storage_id
        self.output = ''

        try:
            self.editor = window.ace.edit(self.editor_id)
            session = self.editor.getSession()
            session.setMode("ace/mode/python")

            self.editor.setOptions({
             'enableLiveAutocompletion': True,
             'enableSnippets': True,
             'highlightActiveLine': False,
             'highlightSelectedWord': True,
             'autoScrollEditorIntoView': True,
             # 'maxLines': session.getLength() 可以根據程式長度設定 editor 列數
             # 設定讓使用者最多可以在畫面中顯示 20 行程式碼
             'maxLines': 20,
             'fontSize': '12pt'
            })
        except:
            from browser import html
            self.editor = html.TEXTAREA(rows=20, cols=70)
            doc[self.editor_id] &amp;lt;= self.editor
            def get_value(): return self.editor.value
            def set_value(x): self.editor.value = x
            self.editor.getValue = get_value
            self.editor.setValue = set_value

    def run(self, *args):
        sys.stdout = cOutput(self.console_id)
        sys.stderr = cOutput(self.console_id)
        doc[self.console_id].value = ''
        src = self.editor.getValue()
        if storage is not None:
           storage[self.storage_id] = src

        t0 = time.perf_counter()
        try:
            #ns = {'__name__':'__main__'}
            # 以 self.editor_id 名稱執行程式
            ns = {'__name__': self.editor_id}
            exec(src, ns)
            state = 1
        except Exception as exc:
            traceback.print_exc(file=sys.stderr)
            state = 0
        self.output = doc[self.console_id].value

        print('&amp;lt;completed in %6.2f ms&amp;gt;' % ((time.perf_counter() - t0) * 1000.0))
        return state

    def show_console(self, ev):
        doc[self.console_id].value = self.output
        doc[self.console_id].cols = 60
        doc[self.console_id].rows = 10

    def clear_console(self, ev):
        doc[self.console_id].value = ""

    def clear_container(self, ev):
        doc[self.container_id].clear()

    # load a Python script
    def load_script(self, evt):
        _name = evt.target.value + '?foo=%s' % time.time()
        self.editor.setValue(open(_name).read())
&lt;/pre&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>零件</title><link href="https://40423224.github.io/40423224_cadp_final/blog/2017-fall-cadp-w5-1.html" rel="alternate"></link><published>2017-10-15T11:00:00+08:00</published><updated>2017-10-15T11:00:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2017-10-15:/40423224_cadp_final/blog/2017-fall-cadp-w5-1.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;iframe src="./../data/stlviewer/viewstl.html?src=./../STL/adjuster.stl" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/jpienwi0Dvo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src="./../data/stlviewer/viewstl.html?src=./../STL/adjuster_base.stl" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wxqf0agzH88" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src="./../data/stlviewer/viewstl.html?src=./../STL/base.stl" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/-acFeq3ORys" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src="./../data/stlviewer/viewstl.html?src=./../STL/connecting.stl" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/7sAKqZJWQS8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src="./../data/stlviewer/viewstl.html?src=./../STL/cylinder.stl" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/zkG8uuVNZRU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src="./../data/stlviewer/viewstl.html?src=./../STL/handle.stl" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Ov1lQO0cZiE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src="./../data/stlviewer/viewstl.html?src=./../STL/hinge.stl" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/sLgU0iBFSmM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src="./../data/stlviewer/viewstl.html?src=./../STL/piston.stl" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/eXXzMKNEz-E" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CADP 第五週</title><link href="https://40423224.github.io/40423224_cadp_final/blog/2017-fall-cadp-w5.html" rel="alternate"></link><published>2017-10-13T11:00:00+08:00</published><updated>2017-10-13T11:00:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2017-10-13:/40423224_cadp_final/blog/2017-fall-cadp-w5.html</id><summary type="html">&lt;p&gt;本週起各學員開始利用 Solvesapce 建立 &lt;a href="./../../../raw/ProEMechanism.pdf?name=a48a8c10af4e636b37ff9c8bc6e98ff00af0ac44"&gt;Nutcracker&lt;/a&gt; 系統的零組件, 並且將所完成的零組件顯示在網誌中, 並提供 .slvs 檔案下載.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;本週起各學員開始利用 Solvesapce 建立 &lt;a href="./../../../raw/ProEMechanism.pdf?name=a48a8c10af4e636b37ff9c8bc6e98ff00af0ac44"&gt;Nutcracker&lt;/a&gt; 系統的零組件, 並且將所完成的零組件顯示在網誌中, 並提供 .slvs 檔案下載.&lt;/p&gt;


&lt;p&gt;&lt;a href="https://hp.kmol.info:8443/get_page/Angle%20Bracket"&gt;Solvespace 零件繪圖導引&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hp.kmol.info:8443/get_page/Assembly"&gt;Solvespace 零件組立導引&lt;/a&gt;&lt;/p&gt;
&lt;iframe src="./../data/stlviewer/viewstl.html?src=./../project/nutcracker/nutcracker.stl" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;p&gt;各零件間的運動模擬, 可以仿 &lt;a href="https://stemkoski.github.io/Three.js/Model-Animation-Control.html"&gt;https://stemkoski.github.io/Three.js/Model-Animation-Control.html&lt;/a&gt; (&lt;a href="https://github.com/stemkoski/stemkoski.github.com"&gt;倉儲&lt;/a&gt;) 及 &lt;a href="https://threejs.org/examples/webgl_animation_keyframes_json.html"&gt;網際零組件動態模擬技術&lt;/a&gt;達成.&lt;/p&gt;
&lt;iframe src="https://threejs.org/examples/webgl_animation_keyframes_json.html" width="800" height="600"&gt;&lt;/iframe&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CADP 第四週</title><link href="https://40423224.github.io/40423224_cadp_final/blog/2017-fall-cadp-w4.html" rel="alternate"></link><published>2017-10-06T11:00:00+08:00</published><updated>2017-10-06T11:00:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2017-10-06:/40423224_cadp_final/blog/2017-fall-cadp-w4.html</id><summary type="html">&lt;p&gt;本週開始將利用 Python3 與 PyQt5 建立一個簡單的計算器, 其中會使用基本的 Python3 程式語法, 也必須了解 Python3 物件導向與視窗事件驅動程式的基本概念.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;本週開始將利用 Python3 與 PyQt5 建立一個簡單的計算器, 其中會使用基本的 Python3 程式語法, 也必須了解 Python3 物件導向與視窗事件驅動程式的基本概念.&lt;/p&gt;


&lt;p&gt;首先在網頁中置入可以練習基本 Python3 程式語法的環境, 採用的架構為 Brython 3.3.4 版, 可以在瀏覽器中將使用者的 Python3 程式轉為 Javascript 後執行.&lt;/p&gt;
&lt;!-- 導入 FileSaver 與 filereader --&gt;

&lt;script type="text/javascript" src="./../ace/FileSaver.min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../ace/filereader.js"&gt;&lt;/script&gt;

&lt;!-- 導入最新版的 Brython 標準程式庫 3.3.4 --&gt;

&lt;script type="text/javascript" src="./../data/Brython-3.3.4/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython 時, 設定 pythonpath 為 data/py, 並將 script1.py 放入, 以便取代 3.2.9 之前版本的 script id 導入 --&gt;

&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下執行 Brython 程式 --&gt;

&lt;h3&gt;利用以下的編輯器執行 Python3 程式&lt;/h3&gt;
&lt;p&gt;在 Firefox 中, 以 Preferences - General - Downloads 選擇 "Always ask me where to save files"&lt;/p&gt;
&lt;p&gt;在 Chrome 中, 以 Settings - Advanced - Downloads 選擇 Ask where to save each file before downloading&lt;/p&gt;
&lt;script src="./../ace/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/ext-language_tools.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/mode-python3.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="./../ace/snippets/python.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;

&lt;script type="text/javascript"&gt;
function doSave(){
    var blob = new Blob([localStorage["py_src"]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById('filename').value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;

&lt;!-- 請注意 Brython 3.3.0 之後的版本, 已經不能使用 script id 模式導入, 改用 pythonpath 中的 script1.py 供後續導入 --&gt;

&lt;script type="text/python3" id="script1"&gt;
import sys
import time
import traceback
import javascript

from browser import document as doc, window, alert

has_ace = True
try:
    editor = window.ace.edit("editor")
    session = editor.getSession()
    session.setMode("ace/mode/python")

    editor.setOptions({
     'enableLiveAutocompletion': True,
     'enableSnippets': True,
     'highlightActiveLine': False,
     'highlightSelectedWord': True
    })
except:
    from browser import html
    editor = html.TEXTAREA(rows=20, cols=70)
    doc["editor"] &lt;= editor
    def get_value(): return editor.value
    def set_value(x):editor.value = x
    editor.getValue = get_value
    editor.setValue = set_value
    has_ace = False

if hasattr(window, 'localStorage'):
    from browser.local_storage import storage
else:
    storage = None

def reset_src():
    if storage is not None and "py_src" in storage:
        editor.setValue(storage["py_src"])
    else:
        editor.setValue('for i in range(10):\n\tprint(i)')
    editor.scrollToRow(0)
    editor.gotoLine(0)

def reset_src_area():
    if storage and "py_src" in storage:
        editor.value = storage["py_src"]
    else:
        editor.value = 'for i in range(10):\n\tprint(i)'

class cOutput:

    def __init__(self,target):
        self.target = doc[target]
    def write(self,data):
        self.target.value += str(data)


#if "console" in doc:
sys.stdout = cOutput("console")
sys.stderr = cOutput("console")

def to_str(xx):
    return str(xx)

info = sys.implementation.version
doc['version'].text = 'Brython %s.%s.%s' % (info.major, info.minor, info.micro)

output = ''

def show_console(ev):
    doc["console"].value = output
    doc["console"].cols = 60
    doc["console"].rows = 10

# load a Python script
def load_script(evt):
    _name = evt.target.value + '?foo=%s' % time.time()
    editor.setValue(open(_name).read())

# run a script, in global namespace if in_globals is True
def run(*args):
    global output
    doc["console"].value = ''
    src = editor.getValue()
    if storage is not None:
       storage["py_src"] = src

    t0 = time.perf_counter()
    try:
        #ns = {'__name__':'__main__'}
        ns = {'__name__':'editor'}
        exec(src, ns)
        state = 1
    except Exception as exc:
        traceback.print_exc(file=sys.stderr)
        state = 0
    output = doc["console"].value

    print('&lt;completed in %6.2f ms&gt;' % ((time.perf_counter() - t0) * 1000.0))
    return state

if has_ace:
    reset_src()
else:
    reset_src_area()

def clear_console(ev):
    doc["console"].value = ""

def clear_container(ev):
    doc["container"].clear()

doc['run'].bind('click',run)
doc['show_console'].bind('click',show_console)
doc['clear_console'].bind('click',clear_console)
doc['clear_container'].bind('click',clear_container)

&lt;/script&gt;

&lt;div id="version"&gt;&lt;/div&gt;

&lt;div id="editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;

&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;

&lt;form&gt;
    &lt;label&gt;Filename: &lt;input type="text" id="filename" placeholder="input file name"/&gt;.py&lt;/label&gt;
    &lt;input type="submit" value="Save" onclick="doSave();"/&gt;
&lt;/form&gt;

&lt;p&gt;&lt;button id="run"&gt;Run&lt;/button&gt;
&lt;button id="show_console"&gt;Output&lt;/button&gt;
&lt;button id="clear_console"&gt;清除&lt;/button&gt;
&lt;button id="clear_container"&gt;清除畫布&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div id="common"&gt;&lt;/div&gt;
&lt;!-- container 主要提供網際繪圖用之畫布 --&gt;
&lt;div id="container"&gt;&lt;/div&gt;&lt;/p&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CADP 第三週</title><link href="https://40423224.github.io/40423224_cadp_final/blog/2017-fall-cadp-w3.html" rel="alternate"></link><published>2017-09-29T11:00:00+08:00</published><updated>2017-09-29T11:00:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2017-09-29:/40423224_cadp_final/blog/2017-fall-cadp-w3.html</id><summary type="html">&lt;p&gt;閱讀心得&lt;/p&gt;
</summary><content type="html">&lt;p&gt;閱讀心得&lt;/p&gt;


&lt;p&gt;閱讀心得:付出才會有收穫.協同設計是團隊合作的任務,為了提升合作效能, 必須經由協調得到共識, 協調完成後, 成員以更緊密的關係與相容工具, 完成創新結果.
機械設計工程師必須具備自學力,執行力與想像力等三個創造力的基本元素外, 還需要能夠彈性運用六種表達能力, 來呈現自己所完成的機械設計產品.由於語言的多樣性,和協同人數地區的變數,協同變得很重要,所以自主學習是成為一名優秀的工程師的基礎.&lt;/p&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry><entry><title>2017 Fall CADP 第二週</title><link href="https://40423224.github.io/40423224_cadp_final/blog/2017-fall-cadp-w2.html" rel="alternate"></link><published>2017-09-22T11:00:00+08:00</published><updated>2017-09-22T11:00:00+08:00</updated><author><name>40423224</name></author><id>tag:40423224.github.io,2017-09-22:/40423224_cadp_final/blog/2017-fall-cadp-w2.html</id><summary type="html">&lt;p&gt;本學期起各班透過一台 Ubuntu 16.04 主機, 建立 Fossil SCM 伺服器, 且每一學員發放一個 Fossil SCM 倉儲, 其中各學員可以利用 Wiki 與 Technote 紀錄學習資料外, 還可以將靜態網誌與簡報檔案放入 Files 資料區.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;本學期起各班透過一台 Ubuntu 16.04 主機, 建立 Fossil SCM 伺服器, 且每一學員發放一個 Fossil SCM 倉儲, 其中各學員可以利用 Wiki 與 Technote 紀錄學習資料外, 還可以將靜態網誌與簡報檔案放入 Files 資料區.&lt;/p&gt;


&lt;p&gt;123456789&lt;/p&gt;
&lt;p&gt;希望為每位學員建立倉儲的設想流程如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;各學員可以獨立維護倉儲內容, 也可以在總管理員的權限下, 為分組學員建立帳號, 逐步導入協同設計&lt;/li&gt;
&lt;li&gt;各學員的倉儲以修課班級命名伺服器, 以學號命名倉儲, 方便依照此一規律擷取各學員的倉儲頁面.&lt;/li&gt;
&lt;li&gt;各學員能以電子郵件收到與新建倉儲相關的連結, 以及帳號密碼.&lt;/li&gt;
&lt;li&gt;必須擴增 Ubuntu ulimits -n 同時開檔的設限範圍 (內定只允許同時開啟 1024 個檔案)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解決方案:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主機名稱可以透過 domain dns 中的 CNAME 別名方式處理, 因為目前所能提供出來的 IPv4/IPv6 雙支援主機, 之前已經都設定了符號名稱.&lt;/li&gt;
&lt;li&gt;fossil init 雖然提供指定管理者的 -A 選項功能, 但是無法直接指定管理者對應密碼, 因此必須建立倉儲之後, 再利用 fossil user 修改密碼, 之後再利用 Gmail 寄出通知信, 其中提供倉儲連結, 登入帳號與密碼等資訊.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;建立各學員倉儲檔案的程式如下, 如前所述, 主要透過兩個 Fossil SCM 指令完成, 在 Windows 採用 Fossil SCM 2.3 版建立所有 .fossil 倉儲時, 將同時以 email 通知各學員. 各學員的 .fossil 檔案再以 sftp 送到伺服主機對應帳號所屬的目錄下. 必須要特別注意的是, 採用 Fossil SCM 2.3 版所建立的 .fossil 倉儲檔案, 在 Ubuntu 操作系統上也必須採用相同版本的 fossil, 否則舊版 fossil 可能無法開啟新版 fossil 程式所建立的倉儲檔.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
import os
import string
import random
# 使用 Gmail 寄信必須導入下列模組
import smtplib
import re
from email.mime.text import MIMEText  
from email.header import Header

# 用來以亂數建立密碼的韓式
def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
    '''
    source: https://stackoverflow.com/questions/2257441/random-string-generation-with-upper-case-letters-and-digits-in-python
    '''
    return ''.join(random.choice(chars) for _ in range(size))

# 讀取學員名單, 逐一取得學員學號, 學員名單, 檢查點 1/7
student_data = open("2017fall_list/1b.txt").read()
student_list = student_data.splitlines()

# 利用 gmail smtp 功能寄信
server = smtplib.SMTP('smtp.gmail.com:587')
server.ehlo()
server.starttls()
# 以下必須準備好對應郵件帳號與密碼的外部檔案, 所提供的寄信帳號, 是否可以寄信, 檢查點 2/7
'''
寄信之前必須到 https://www.google.com/settings/security/lesssecureapps 修改權限, 改為較低安全權限
否則無法使用程式寄信!
'''
# 從外部檔案讀取要用來寄信的 gmail 帳號與密碼
# mail.txt 格式為: 電子郵箱,對應密碼, 以逗點隔開, 檢查點 3/7
email_data = open("z:/2017fall/mail.txt").read()
email, email_password= email_data.split(",")
print(email, email_password)
# 是否登入所提供寄信的電子郵箱, 4/7
server.login(email, email_password)
# 不同課程名稱, 與對應主機名稱, 必須配合修改 5/7
course_title = "計算機程式"
fossil_server = "cpb.kmol.info"

for student_num in student_list:
    username = student_num
    repository = username + '.fossil'
    # 利用所提供的字串, 以亂數組成六個字元的密碼
    password = id_generator(6, "23456789abcdef")
    print(student_num, ", " , password)

    # 執行 dos command 指令, 建立倉儲
    os.system("fossil init -A " +username + " " + repository)
    print("已經建立倉儲 " + repository)

    # 執行 dos command 指令, 修改使用者密碼
    os.system("fossil user password " + username + " " + password + " -R " + repository)
    print("已經修改密碼")

    # 利用 Gmail 寄信, 告知各學員倉儲連結與帳號密碼
    # 每一位學員收到的 output 都從這裡 reset
    output = ""
    # 若學號欄為空, 則不寄信
    if student_num != "":
        # output 為寄給每一位學員的資料表格
        mail_content = student_num+' 您好: &lt;br /&gt;&lt;br /&gt; 您在 '+course_title+' 課程中的區域網路倉儲: &lt;a href="https://'+fossil_server+'/'+student_num+'"&gt;https://'+fossil_server+'/'+student_num+'&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;'
        mail_content += '管理帳號為:'+ student_num + '&lt;br /&gt; 管理密碼為: '+ password+'&lt;br /&gt;&lt;br /&gt;'
        print(student_num)
        print(mail_content)
        # 至此 mail_content 已經確定
        # 在測試與實際寄送資料, 也必須配合修改, 檢查點  6/7
        receiver_email = student_num + "@gm.nfu.edu.tw"
        # 測試用
        #receiver_email = student_num+"@mde.tw"
        # 列出收信人 email 位址
        #print(receiver_email)
        #message= MIMEText(mail_content,'plain','UTF-8')
        # 以 html 格式寄信
        message= MIMEText(mail_content,'html','UTF-8')
        message['Subject'] = Header(course_title+" Fossil SCM 帳號通知", 'UTF-8') 
        # 可以先不寄信, 確定格式正確後再開啟, 是否實際寄出信件, 檢查點 7/7
        server.sendmail("gmail_address", receiver_email, message.as_string())
server.quit()
&lt;/pre&gt;

&lt;p&gt;各班所完成的主機:&lt;/p&gt;
&lt;p&gt;二甲電腦輔助設計實習: &lt;a href="https://cadpa.kmol.info"&gt;https://cadpa.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二乙電腦輔助設計實習: &lt;a href="https://cadpb.kmol.info"&gt;https://cadpb.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一甲計算機程式: &lt;a href="https://cpa.kmol.info"&gt;https://cpa.kmol.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一乙計算機程式: &lt;a href="https://cpb.kmol.info"&gt;https://cpb.kmol.info&lt;/a&gt;&lt;/p&gt;</content><category term="2017fall"></category><category term="CADP"></category></entry></feed>